/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package extra.game.data.entity{	import base.data.entity.Entity;			/**	 * Data Model for Cells. Think of a cell as a mini-map. The entire game is made	 * up of cells, for a huge continuous world. As the player moves around, cells	 * are loaded and unloaded from the game.	 */	public class Cell extends Entity	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/**		 * The type of the cell. This is either "e" for exterior or "i" for interior.		 */		public var type:String;				/**		 * The ID of the layout map resource that is associated with the cell.		 */		public var mapID:String;				/**		 * An ID to a audio resource that is used as a looping background sound in the cell.		 * This property is optional.		 */		public var bgAudioID:String;				/**		 * An ID to a audio group resource which contains music resources that are randomly		 * played while the player is inside the cell. This property is optional.		 */		public var musicGroupID:String;				/**		 * An ID to a water definition resource that determines what type of water is		 * used in the cell. If this is null, the cell does not possess any water.		 */		public var waterID:String;				/**		 * The name of the cell which is used for display in-game.		 */		public var name:String;				/**		 * The ID of either an actor or a faction that holds the ownership of the cell.		 * If this property is null the cell has no ownership.		 */		public var ownershipID:String;				/**		 * If the cell is owned by a faction this property can be used to determine a		 * faction rank that is required to enter the cell without trespassing.		 */		public var ownershipFactionRank:int;				/**		 * Determines if fast-travel is allowed from the cell.		 */		public var allowFastTravel:Boolean;				/**		 * Determines if waiting is allowed in the cell.		 */		public var allowWait:Boolean;				/**		 * Determines whether the cell is a public area or not. If true, no one will		 * ever be considered trespassing in the cell, but all objects in the cell		 * still inherit the cell ownership and so cannot be freely taken.		 */		public var publicArea:Boolean;				/**		 * Determines whether the cell is off limits or not. If true, anyone caught		 * trespassing will immediately be considered committing a crime (instead		 * of being warned as with normal trespassing behavior).		 */		public var offLimits:Boolean;	}}