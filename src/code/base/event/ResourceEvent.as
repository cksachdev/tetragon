/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package base.event{	import base.io.resource.ResourceBulkFile;	import flash.events.Event;			/**	 * A ResourceEvent is an Event used by a Resource to dispatch load status information. In	 * common use, this event never needs to be used as the ResourceManager wraps its	 * functionality.	 */	public class ResourceEvent extends Event	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				public static const INIT_SUCCESS:String =	"resourceInitSuccess";		public static const INIT_FAILED:String =	"resourceInitFailed";		public static const FILE_FAILED:String =	"resourceFileFailed";		public static const FILE_LOADED:String =	"resourceFileLoaded";		public static const BULK_PROGRESS:String =	"resourceBulkProgress";		public static const BULK_LOADED:String =	"resourceBulkLoaded";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _bulkFile:ResourceBulkFile;		/** @private */		protected var _bytesLoaded:int;		/** @private */		protected var _bytesTotal:int;		/** @private */		protected var _percentLoaded:int;		/** @private */		protected var _text:String;
						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Creates a new ResourceEvent instance.		 * 		 * @param type		 * @param bulkFile The ResourceBulkFile that is being loaded.		 * @param text Message, usually for error events.		 * @param bytesLoaded		 * @param bytesTotal		 * @param percentLoaded		 */		public function ResourceEvent(type:String, bulkFile:ResourceBulkFile = null,			text:String = null, bytesLoaded:int = 0, bytesTotal:int = 0, percentLoaded:int = 0)		{			_bulkFile = bulkFile;			_text = text;			_bytesLoaded = bytesLoaded;			_bytesTotal = bytesTotal;			_percentLoaded = percentLoaded;			super(type, false, false);		}						/**		 * Clones the event.		 */		override public function clone():Event		{			return new ResourceEvent(type, _bulkFile, _text, _bytesLoaded, _bytesTotal,				_percentLoaded);		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The ResourceBulkFile that is being loaded while this event has been fired.		 * Should not be accessed anywhere outside the resource management!		 * 		 * @private		 */		public function get bulkFile():ResourceBulkFile		{			return _bulkFile;		}						/**		 * Text message of error in case the resource failed to load.		 */		public function get text():String		{			return _text;		}						/**		 * The count of resource files in the currently loading bulk that have already		 * been loaded.		 */		public function get currentCount():int
		{
			return _bulkFile.bulk.filesLoaded;
		}						/**		 * The total count of resource files in the currently loading bulk.		 */		public function get totalCount():int
		{			return _bulkFile.bulk.filesTotal;		}						public function get bytesLoaded():int		{			return _bytesLoaded;		}						public function get bytesTotal():int		{			return _bytesTotal;		}						public function get percentLoaded():int		{			return _percentLoaded;		}	}}