/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package base.data.parsers{	import base.io.resource.ResourceGroup;	import com.hexagonstar.debug.HLog;	import com.hexagonstar.exception.SingletonException;		/**	 * A singleton factory that maps data parsers to data type IDs and which is used to	 * create a data parser object for parsing data of the specified data type ID.	 */	public class DataTypeParserFactory	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		private static var _instance:DataTypeParserFactory;		/** @private */		private static var _singletonLock:Boolean = false;				/** @private */		private var _map:Object;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new instance of the class.		 */		public function DataTypeParserFactory()		{			if (!_singletonLock) throw new SingletonException(this);		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Initializes the DataTypeParserFactory.		 */		public function init():void		{			_map = {};						/* Add default parsers. */			addDataType(ResourceGroup.NONE, NullDataParser);			addDataType(ResourceGroup.TEXT, TextDataParser);			//addDataType("XML", XMLDataParser); // TODO		}						/**		 * Maps the specified data type ID to the specified parser class. The parser		 * class must implement IResourceParser.		 * 		 * @param dataTypeID The ID of the data type.		 * @param parserClass The parser class to map.		 */		public function addDataType(dataTypeID:String, parserClass:Class):void
		{
			_map[dataTypeID] = parserClass;		}						/**		 * Creates a new parser that is associated with the specified ID.		 * 		 * @param dataTypeID The ID of the data type for which to create a parser.		 * @return A parser of type IResourceParser.		 */		public function create(dataTypeID:String):IDataParser		{			var clazz:* = _map[dataTypeID];			var parser:IDataParser;						if (!clazz)
			{
				HLog.error(toString() + " Failed to create parser class! No parser class has been"					+ " mapped for dataTypeID \"" + dataTypeID + "\".");				return null;			}						try			{				parser = new clazz();			}			catch (err:Error)			{				HLog.error(toString() + " Failed to create parser class! The parser class mapped"					+ " for dataTypeID \"" + dataTypeID + "\" is not of type IResourceParser.");				return null;			}						return parser;		}						/**		 * Returns a String Representation of the class.		 * 		 * @return A String Representation of the class.		 */		public function toString():String		{			return "[DataTypeParserFactory]";		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Returns the singleton instance of the class.		 */		public static function get instance():DataTypeParserFactory		{			if (_instance == null)			{				_singletonLock = true;				_instance = new DataTypeParserFactory();				_singletonLock = false;			}			return _instance;		}	}}