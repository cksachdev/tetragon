/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package base.core.cli{	import base.Main;	import base.command.cli.*;	import base.command.env.*;	import base.command.file.*;			/**	 * The class where all command registrations for the CLI are placed.	 * Register any commands here that you want to have usable in the CLI.	 */	public class CLICommandRegister	{		//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new instance of the class.		 */		public function CLICommandRegister(main:Main)		{			registerCommands(main.console.cli);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		private function registerCommands(cli:CLI):void		{			cli.registerCommand("commands", ListCLICommandsCommand, "Lists all available CLI commands.", "cli");			cli.registerCommand("log", LogCommand, "Sends the specified message to the logger.", "cli");			cli.registerCommand("help", HelpCommand, "Shows help summary about the console or a specified command.", "cli");			cli.registerCommand("size", ToggleConsoleSizeCommand, "Toggles between different console sizes.", "cli");			cli.registerCommand("listmeta", ListMetaDataCommand, "Displays the full meta data of the application.", "cli");			cli.registerCommand("listcaps", ListCapabilitiesCommand, "Lists the current runtime's capabilities.", "cli");			cli.registerCommand("listcaps", ListCapabilitiesCommand, "Lists the current runtime's capabilities.", "cli");			cli.registerCommand("clear", ClearConsoleCommand, "Clears the console buffer.", "cli");			cli.registerCommand("hide", HideConsoleCommand, "Hides the console.", "cli");			cli.registerCommand("setalpha", SetConsoleAlphaCommand, "Sets the console transparency to a value between 0.0 and 1.0.", "cli");			cli.registerCommand("setcolor", SetConsoleColorCommand, "Sets the console background color.", "cli");			cli.registerCommand("appinfo", OutputAppInfoCommand, "Displays application information string.", "cli");			cli.registerCommand("runtime", OutputRuntimeInfoCommand, "Displays information about the runtime.", "cli");			cli.registerCommand("listfonts", ListFontsCommand, "Lists all available fonts.", "cli");						cli.registerCommand("fullscreen", ToggleFullscreenCommand, "Toggles fullscreen mode (if supported).", "env");			cli.registerCommand("setfps", SetFramerateCommand, "Sets the stage framerate to the specified value.", "env");			cli.registerCommand("gc", ForceGCCommand, "Forces a garbage collection mark/sweep.", "env");			cli.registerCommand("exit", ExitApplicationCommand, "Exits the application.", "env");			cli.registerCommand("fps", ToggleFPSMonitorCommand, "Toggles the FPS Monitor on/off.", "env");			cli.registerCommand("fpspos", ToggleFPSMonitorPosCommand, "Switches between different FPS Monitor positions.", "env");			cli.registerCommand("init", AppInitCommand, "Initializes the application.", "env");			cli.registerCommand("openscreen", OpenScreenCommand, "Opens the screen that is registered with the specified screen ID.", "env");			cli.registerCommand("listscreens", ListScreensCommand, "Lists all registered screens.", "env");						cli.registerCommand("liststrings", ListStringsCommand, "Outputs a list of all mapped strings.", "file");			cli.registerCommand("listresources", ListResourcesCommand, "Outputs a list of all mapped resources.", "file");			cli.registerCommand("loadresource", LoadResourceCommand, "Loads a resource by it's resource ID.", "file");			cli.registerCommand("unloadresource", UnloadResourceCommand, "Unloads a previously loaded resource.", "file");			cli.registerCommand("unloadallresources", UnloadAllResourcesCommand, "Forces unloading of all previously loaded resources.", "file");			cli.registerCommand("resourceinfo", ResourceInfoCommand, "Outputs info about the resource with the specified ID.", "file");		}	}}