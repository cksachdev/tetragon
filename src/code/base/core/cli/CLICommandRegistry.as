/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package base.core.cli{	import base.Main;	import base.command.cli.*;	import base.command.env.*;	import base.command.file.*;			/**	 * Registry for CLI commands that are available among all build types. You can register	 * any commands here that you want to have usable in the CLI among all build types.	 */	public class CLICommandRegistry	{		//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new instance of the class.		 */		public function CLICommandRegistry(main:Main)		{			registerCommands(main.console.cli);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		private function registerCommands(cli:CLI):void		{			cli.registerCommand("cli", "commands", ListCLICommandsCommand, "Lists all available CLI commands.");			cli.registerCommand("cli", "log", LogCommand, "Sends the specified message to the logger.");			cli.registerCommand("cli", "help", HelpCommand, "Shows help summary about the console or a specified command.");			cli.registerCommand("cli", "size", ToggleConsoleSizeCommand, "Toggles between different console sizes.");			cli.registerCommand("cli", "listmeta", ListMetaDataCommand, "Displays the full meta data of the application.");			cli.registerCommand("cli", "listcaps", ListCapabilitiesCommand, "Lists the current runtime's capabilities.");			cli.registerCommand("cli", "listconfig", ListConfigCommand, "Lists the current application configuration.");			cli.registerCommand("cli", "listsettings", ListSettingsCommand, "Lists all locally stored application settings.");			cli.registerCommand("cli", "listfonts", ListFontsCommand, "Lists all available fonts.");			cli.registerCommand("cli", "clear", ClearConsoleCommand, "Clears the console buffer.");			cli.registerCommand("cli", "hide", HideConsoleCommand, "Hides the console.");			cli.registerCommand("cli", "setalpha", SetConsoleAlphaCommand, "Sets the console transparency to a value between 0.0 and 1.0.");			cli.registerCommand("cli", "setcolor", SetConsoleColorCommand, "Sets the console background color.");			cli.registerCommand("cli", "appinfo", OutputAppInfoCommand, "Displays application information string.");			cli.registerCommand("cli", "runtime", OutputRuntimeInfoCommand, "Displays information about the runtime.");						cli.registerCommand("env", "fullscreen", ToggleFullscreenCommand, "Toggles fullscreen mode (if supported).");			cli.registerCommand("env", "setfps", SetFramerateCommand, "Sets the stage framerate to the specified value.");			cli.registerCommand("env", "gc", ForceGCCommand, "Forces a garbage collection mark/sweep.");			cli.registerCommand("env", "exit", ExitApplicationCommand, "Exits the application.");			cli.registerCommand("env", "fps", ToggleFPSMonitorCommand, "Toggles the FPS Monitor on/off.");			cli.registerCommand("env", "fpspos", ToggleFPSMonitorPosCommand, "Switches between different FPS Monitor positions.");			cli.registerCommand("env", "init", AppInitCommand, "Initializes the application.");			cli.registerCommand("env", "openscreen", OpenScreenCommand, "Opens the screen that is registered with the specified screen ID.");			cli.registerCommand("env", "listscreens", ListScreensCommand, "Lists all registered screens.");						cli.registerCommand("file", "liststrings", ListStringsCommand, "Outputs a list of all mapped strings.");			cli.registerCommand("file", "listresources", ListResourcesCommand, "Outputs a list of all mapped resources.");			cli.registerCommand("file", "loadresource", LoadResourceCommand, "Loads a resource by it's resource ID.");			cli.registerCommand("file", "unloadresource", UnloadResourceCommand, "Unloads a previously loaded resource.");			cli.registerCommand("file", "unloadallresources", UnloadAllResourcesCommand, "Forces unloading of all previously loaded resources.");			cli.registerCommand("file", "resourceinfo", ResourceInfoCommand, "Outputs info about the resource with the specified ID.");		}	}}