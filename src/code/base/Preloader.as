/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * tetragon : Engine for Flash-based web and desktop games. * Licensed under the MIT License. *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package base{	import base.core.preload.*;	import base.data.Params;	import base.data.Registry;	import com.hexagonstar.constants.Alignment;	import mx.core.*;	import flash.display.DisplayObject;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.utils.getDefinitionByName;			/**	 * The Preloader preloads the web-based application SWF which it is part of. This	 * class becomes the root of the SWF by delegation in the entry class. After	 * preloading has finished, the Entry class is instantiated inside this class and is	 * notified that the preload process has been finished (by calling	 * onApplicationPreloaded).	 * 	 * <p>This class acts as a wrapper for various different preload display classes. The	 * default used implementation is TetragonPreloadDisplay. You can write your own	 * preload displays by implementing the IPreloadDisplay interface and then configure	 * your class for use with this preloader inside the <code>configure()</code>	 * method.</p>	 * 	 * @see base.Entry	 * @see base.core.preload.IPreloadDisplay	 */	public class Preloader extends MovieClip	{		//-----------------------------------------------------------------------------------------
		// Constants
		//-----------------------------------------------------------------------------------------				/**		 * The qualified class name of the entry class.		 * 		 * <p>IMPORTANT: If the base package and/or entry class name is changed this		 * name needs to be adapted to the new name!</p>		 */		private const _entryClass:String = "base.Entry";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				private var _preloadDisplay:IPreloadDisplay;						//-----------------------------------------------------------------------------------------
		// Constructor
		//-----------------------------------------------------------------------------------------				/**		 * Creates a new AppPreloader instance. super() must be called with		 * the app's entry class (and package) name as the argument. By		 * default this class name is 'App'.		 */		public function Preloader()		{			super();			stop();						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						/* Fetch Flashvars */			Registry.params = new Params();			Registry.params.parseFlashVars(LoaderInfo(root.loaderInfo).parameters);						configure();			start();		}						/**		 * This method is called by the underlying preload display class after		 * it finished preloading the application.		 */		public function finish():void		{			if (_preloadDisplay is DisplayObject)			{				removeChild(DisplayObject(_preloadDisplay));			}			_preloadDisplay.dispose();			_preloadDisplay = null;						/* SpriteAsset is always embedded! */			var link1:SpriteAsset;						/* Forces inclusion of Flex asset classes if we use embedded resources. */			CONFIG::USE_EMBEDDED_RESOURCES			{				var link2:ByteArrayAsset;				var link3:BitmapAsset;				var link4:MovieClipAsset;				var link5:MovieClipLoaderAsset;				var link6:FontAsset;				var link7:SoundAsset;			}						initiateEntry();		}						//-----------------------------------------------------------------------------------------
		// Private Methods
		//-----------------------------------------------------------------------------------------				/**		 * Can be used to configure the preloader with a different preload display		 * and different preload display parameters.
		 */
		private function configure():void
		{
			_preloadDisplay = new TetragonPreloadDisplay(this);			_preloadDisplay.testMode = true;			_preloadDisplay.padding = 20;			_preloadDisplay.horizontalAlignment = Alignment.CENTER;			_preloadDisplay.verticalAlignment = Alignment.VERTICAL_CENTER;			_preloadDisplay.color = 0xFFFFFF;			_preloadDisplay.fadeOutDelay = 40;		}						/**		 * Starts the preloader.		 */		private function start():void		{			if (Registry.params.skipPreloader)			{				_preloadDisplay = new BasicPreloadDisplay(this);			}			if (!_preloadDisplay)			{				_preloadDisplay = new TetragonPreloadDisplay(this);			}			if (_preloadDisplay is DisplayObject)			{				addChild(DisplayObject(_preloadDisplay));			}						_preloadDisplay.start();		}						/**		 * Instanciates the entry class and enters it.
		 */
		private function initiateEntry():void
		{
			gotoAndStop(2);						var entryClass:Class = Class(getDefinitionByName(_entryClass));			if (entryClass)			{				var entry:IPreloadable = new entryClass();				entry.onApplicationPreloaded(this);			}		}	}}